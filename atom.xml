<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿斌的博客</title>
  
  <subtitle>一个小小码农的自我记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://abin0214.github.io/"/>
  <updated>2020-07-19T02:18:11.344Z</updated>
  <id>https://abin0214.github.io/</id>
  
  <author>
    <name>aBin0214</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python-字符串(String)</title>
    <link href="https://abin0214.github.io/2020/07/18/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2(string)/"/>
    <id>https://abin0214.github.io/2020/07/18/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2(string)/</id>
    <published>2020-07-18T12:55:18.296Z</published>
    <updated>2020-07-19T02:18:11.344Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h2 id="Python-字符串-string"><a href="#Python-字符串-string" class="headerlink" title="Python-字符串(string)"></a>Python-字符串(string)</h2><p>字符串是Python中最常用的数据类型。可以用<code>&#39;&#39;</code>和<code>&quot;&quot;</code>来创建字符串。</p><h4 id="1-创建字符串"><a href="#1-创建字符串" class="headerlink" title="1.创建字符串"></a>1.创建字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">'Hello world.'</span></span><br><span class="line">string2 = <span class="string">"I'am bad."</span></span><br></pre></td></tr></table></figure><h4 id="2-访问字符串中的值"><a href="#2-访问字符串中的值" class="headerlink" title="2.访问字符串中的值"></a>2.访问字符串中的值</h4><p>可以通过<strong>索引</strong>或是<strong>切片</strong>的方式来访问字符串。</p><p>Python不支持单字符类型，单字符在Python中也是作为一个字符串使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"Son of the storm"</span></span><br><span class="line"></span><br><span class="line">a = string[<span class="number">1</span>]</span><br><span class="line">b = string[<span class="number">2</span>:<span class="number">3</span>]</span><br><span class="line">c = string[<span class="number">3</span>:]</span><br><span class="line">d = string[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">print(a,b,c,d,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o</span><br><span class="line">n</span><br><span class="line"> of the storm</span><br><span class="line">m</span><br></pre></td></tr></table></figure><h4 id="3-判断字符串中是否包含指定的字符"><a href="#3-判断字符串中是否包含指定的字符" class="headerlink" title="3.判断字符串中是否包含指定的字符"></a>3.判断字符串中是否包含指定的字符</h4><p>使用<code>in</code>和<code>not in</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"Queen of the Andals, the Rhoynars and the First Men"</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">"Queen"</span> <span class="keyword">in</span> string:<span class="comment">#区分大小写</span></span><br><span class="line">    print(<span class="string">"Queen is in the string."</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"queen"</span> <span class="keyword">not</span> <span class="keyword">in</span> string:</span><br><span class="line">    print(<span class="string">"queen is not in the string."</span>)</span><br></pre></td></tr></table></figure><p>输出如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Queen <span class="keyword">is</span> <span class="keyword">in</span> the string.</span><br><span class="line">queen <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> the string.</span><br></pre></td></tr></table></figure><h4 id="4-字符串拼接"><a href="#4-字符串拼接" class="headerlink" title="4.字符串拼接"></a>4.字符串拼接</h4><p>使用<code>+</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">"Queen/Lord of the Seven Kingdoms"</span></span><br><span class="line">string2 = <span class="string">"Protector of the Realm"</span></span><br><span class="line">print(string1+<span class="string">" , "</span>+string2)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queen/Lord of the Seven Kingdoms , Protector of the Realm</span><br></pre></td></tr></table></figure><h4 id="5-重复字符串。"><a href="#5-重复字符串。" class="headerlink" title="5.重复字符串。"></a>5.重复字符串。</h4><p>使用<code>*</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"Khaleesi of the Great Grass Sea."</span></span><br><span class="line">print(string*<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Khaleesi of the Great Grass Sea.Khaleesi of the Great Grass Sea.</span><br></pre></td></tr></table></figure><h4 id="6-原始字符串"><a href="#6-原始字符串" class="headerlink" title="6.原始字符串"></a>6.原始字符串</h4><p>使用<code>r</code>或是<code>R</code>。</p><p>保持字符串原意输出，不转义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">"I'm OK.\nThank you.\n..."</span></span><br><span class="line">string2 = <span class="string">r"I'm OK.\nThank you.\n..."</span></span><br><span class="line">string3 = R<span class="string">"I'm OK.\nThank you.\n..."</span></span><br><span class="line"></span><br><span class="line">print(string1,string2,string3,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I<span class="string">'m OK.</span></span><br><span class="line"><span class="string">Thank you.</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">I'</span>m OK.\nThank you.\n...</span><br><span class="line">I<span class="string">'m OK.\nThank you.\n...</span></span><br></pre></td></tr></table></figure><h4 id="7-转义字符"><a href="#7-转义字符" class="headerlink" title="7.转义字符"></a>7.转义字符</h4><p>需要在字符串中添加特殊字符时，需要添加<code>/</code>转义字符。</p><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\</code></td><td>在行尾时，续行符。</td></tr><tr><td><code>\\</code></td><td>反斜杠符号</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\a</code></td><td>响铃符</td></tr><tr><td><code>\b</code></td><td>退格</td></tr><tr><td><code>\000</code></td><td>空格</td></tr><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\v</code></td><td>纵向制表符</td></tr><tr><td><code>\t</code></td><td>横向制表符</td></tr><tr><td><code>\r</code></td><td>回车</td></tr><tr><td><code>\f</code></td><td>换页</td></tr><tr><td><code>\oyy</code></td><td>八进制数，<strong>yy</strong> 代表的字符，例如：<strong>\o12</strong> 代表换行，其中 o 是字母，不是数字 0。</td></tr><tr><td><code>\xyy</code></td><td>十六进制数，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td><code>\other</code></td><td>其它的字符以普通格式输出</td></tr></tbody></table><h4 id="8-三引号-多行字符串"><a href="#8-三引号-多行字符串" class="headerlink" title="8.三引号(多行字符串)"></a>8.三引号(多行字符串)</h4><p>1）使用<code>\</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"Queen of the Andals, the Rhoynars and the First Men.\n"</span> \</span><br><span class="line"><span class="string">"Queen/Lord of the Seven Kingdoms.\n"</span> \</span><br><span class="line"><span class="string">"Protector of the Realm."</span></span><br><span class="line"></span><br><span class="line">print(string)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Queen of the Andals, the Rhoynars <span class="keyword">and</span> the First Men.</span><br><span class="line">Queen/Lord of the Seven Kingdoms.</span><br><span class="line">Protector of the Realm.</span><br></pre></td></tr></table></figure><p>2）使用<code>&#39;&#39;&#39;&#39;&#39;&#39;</code>或是<code>&quot;&quot;&quot;&quot;&quot;&quot;</code>。</p><p> python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"""</span></span><br><span class="line"><span class="string">Queen of the Andals, the Rhoynars and the First Men.\nQueen/Lord of the Seven Kingdoms.</span></span><br><span class="line"><span class="string">\tProtector of the Realm.</span></span><br><span class="line"><span class="string">Khaleesi of the Great Grass Sea.</span></span><br><span class="line"><span class="string">Breaker of Shackles/Chains.</span></span><br><span class="line"><span class="string">Queen of Meereen.</span></span><br><span class="line"><span class="string">Princess of Dragonstone.</span></span><br><span class="line"><span class="string">Unburnt.</span></span><br><span class="line"><span class="string">Mother of Dragons.</span></span><br><span class="line"><span class="string">Mhysa.</span></span><br><span class="line"><span class="string">Mother.</span></span><br><span class="line"><span class="string">Silver Queen.</span></span><br><span class="line"><span class="string">Silver Lady.</span></span><br><span class="line"><span class="string">Dragon Queen.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(string)</span><br></pre></td></tr></table></figure><p>输出如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Queen of the Andals, the Rhoynars <span class="keyword">and</span> the First Men.</span><br><span class="line">Queen/Lord of the Seven Kingdoms.</span><br><span class="line">        Protector of the Realm.</span><br><span class="line">Khaleesi of the Great Grass Sea.</span><br><span class="line">Breaker of Shackles/Chains.</span><br><span class="line">Queen of Meereen.</span><br><span class="line">Princess of Dragonstone.</span><br><span class="line">Unburnt.</span><br><span class="line">Mother of Dragons.</span><br><span class="line">Mhysa.</span><br><span class="line">Mother.</span><br><span class="line">Silver Queen.</span><br><span class="line">Silver Lady.</span><br><span class="line">Dragon Queen.</span><br></pre></td></tr></table></figure><h4 id="9-Unicode字符串"><a href="#9-Unicode字符串" class="headerlink" title="9.Unicode字符串"></a>9.Unicode字符串</h4><p>Python3中，所有的字符串都是Unicode的字符串。</p><h4 id="10-格式转化"><a href="#10-格式转化" class="headerlink" title="10.格式转化"></a>10.格式转化</h4><p><code>capitalize()</code>函数：将字符串第一个字符转化为大写。</p><p><code>center(width, fillchar)</code>函数： 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。 </p><p><code>ljust(width,fillchar)</code>函数：返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</p><p> <code>rjust(width,fillchar)</code>函数： 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串。</p><p><code>expandtabs(tabsize=8)</code>函数： 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。 </p><p><code>lower()</code>函数：转换字符串中所有大写字符为小写。</p><p><code>upper()</code>函数：转换字符串中的小写字母为大写。</p><p><code>lstrip()</code>函数：截掉字符串左边的空格或指定字符。</p><p><code>rstrip()</code>函数：删除字符串字符串末尾的空格。</p><p><code>strip([chars\])</code>函数：在字符串上执行 lstrip()和 rstrip()。</p><p><code>swapcase()</code>函数: 将字符串中大写转换为小写，小写转换为大写。</p><p><code>title()</code>函数： 返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写。</p><p><code>zfill (width)</code>函数：返回长度为 width 的字符串，原字符串右对齐，前面填充0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"discovery requires experimentation。"</span></span><br><span class="line">string1 = string.capitalize()</span><br><span class="line">string2 = string.center(<span class="number">50</span>,<span class="string">'-'</span>)</span><br><span class="line">string3 = string.ljust(<span class="number">50</span>,<span class="string">'-'</span>)</span><br><span class="line">string4 = string.rjust(<span class="number">50</span>,<span class="string">'-'</span>)</span><br><span class="line">string5 = <span class="string">"\thello\tworld"</span>.expandtabs()</span><br><span class="line">string6 = <span class="string">"DON'T MIND."</span>.lower()</span><br><span class="line">string7 = <span class="string">"don't mind."</span>.upper()</span><br><span class="line">string8 = <span class="string">"----don't mind----"</span>.lstrip(<span class="string">"-"</span>)</span><br><span class="line">string9 = <span class="string">"----don't mind----"</span>.rstrip(<span class="string">"-"</span>)</span><br><span class="line">string10 = <span class="string">"----don't mind----"</span>.strip(<span class="string">"-"</span>)</span><br><span class="line">string11 = <span class="string">"Don't MIND"</span>.swapcase()</span><br><span class="line">string12 = string.title()</span><br><span class="line">string13 = string.zfill(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">print(string1,string2,string3,string4,string5,string6,string7,string8,string9,string10,string11,string12,string13,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Discovery requires experimentation。</span><br><span class="line">-------discovery requires experimentation。--------</span><br><span class="line">discovery requires experimentation。---------------</span><br><span class="line">---------------discovery requires experimentation。</span><br><span class="line">        hello   world</span><br><span class="line">don<span class="string">'t mind.</span></span><br><span class="line"><span class="string">DON'</span>T MIND.</span><br><span class="line">don<span class="string">'t mind----</span></span><br><span class="line"><span class="string">----don'</span>t mind</span><br><span class="line">don<span class="string">'t mind</span></span><br><span class="line"><span class="string">dON'</span>T mind</span><br><span class="line">Discovery Requires Experimentation。</span><br><span class="line"><span class="number">000000000000000</span>discovery requires experimentation。</span><br></pre></td></tr></table></figure><h4 id="11-格式判断"><a href="#11-格式判断" class="headerlink" title="11.格式判断"></a>11.格式判断</h4><p> <code>startswith(substr, beg=0,end=len(string))</code>函数: 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。 </p><p><code>endswith(suffix, beg=0, end=len(string))</code>函数: 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False。</p><p><code>isalnum()</code>函数： 如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False。</p><p><code>isalpha()</code>函数： 如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False。</p><p><code>isdigit()</code>函数： 如果字符串只包含数字则返回 True 否则返回 False。</p><p><code>islower()</code>函数： 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False 。</p><p><code>isnumeric()</code>函数： 如果字符串中只包含数字字符，则返回 True，否则返回 False。</p><p><code>isspace()</code>函数： 如果字符串中只包含空白，则返回 True，否则返回 False。</p><p><code>istitle()</code>函数： 如果字符串是标题化的（每个单词首字母大写），则返回 True，否则返回 False。</p><p><code>isupper()</code>函数： 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False。</p><p><code>isdecimal()</code>函数：检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"Linux is not Unix"</span></span><br><span class="line">res1 = string.startswith(<span class="string">"Linux"</span>)</span><br><span class="line">res2 = string.endswith(<span class="string">"Unix"</span>)</span><br><span class="line">res3 = <span class="string">"linux1111"</span>.isalnum()</span><br><span class="line">res4 = <span class="string">"linux"</span>.isalpha()</span><br><span class="line">res5 = <span class="string">"12345677"</span>.isdigit()</span><br><span class="line">res6 = <span class="string">"hello world"</span>.islower()</span><br><span class="line">res7 = <span class="string">"1234345"</span>.isnumeric()</span><br><span class="line">res8 = <span class="string">"    "</span>.isspace()</span><br><span class="line">res9 = <span class="string">"This Is My Blogs."</span>.istitle()</span><br><span class="line">res10 = <span class="string">"THIS IS MY BLOGS."</span>.isupper()</span><br><span class="line">res11 = <span class="string">"11223322"</span>.isdecimal()</span><br><span class="line"></span><br><span class="line">print(res1,res2,res3,res4,res5,res6,res7,res8,res9,res10,res11,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="12-查找"><a href="#12-查找" class="headerlink" title="12.查找"></a>12.查找</h4><p> <code>find(str, beg=0, end=len(string))</code>函数： 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1 。</p><p><code>index(str, beg=0, end=len(string))</code>函数： 跟find()方法一样，但str不在字符串中会报一个异常. </p><p><code>rfind(str, beg=0,end=len(string))</code>函数：类似于 find()函数，不过是从右边开始查找。</p><p><code>rindex( str, beg=0, end=len(string))</code>函数：类似于 index()，不过是从右边开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"Miracles happen every day.Miracles happen every day."</span></span><br><span class="line">res1 = string.find(<span class="string">"happen"</span>)</span><br><span class="line">res2 = string.find(<span class="string">"hello"</span>)</span><br><span class="line">res3 = string.index(<span class="string">"every"</span>)</span><br><span class="line">res4 = string.rfind(<span class="string">"happen"</span>)</span><br><span class="line">res5 = string.rindex(<span class="string">"every"</span>)</span><br><span class="line"></span><br><span class="line">print(res1,res2,res3,res4,res5,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">35</span></span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><h4 id="13-统计"><a href="#13-统计" class="headerlink" title="13.统计"></a>13.统计</h4><p> <code>count(str, beg= 0,end=len(string))</code>函数： 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数。</p><p><code>len(string)</code>函数：返回字符串长度。</p><p><code>max(str)</code>函数：返回字符串 str 中最大的字母。</p><p><code>min(str)</code>函数：返回字符串 str 中最小的字母。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"life was like a box a chocolates, never know what you're gonna get."</span></span><br><span class="line">num = string.count(<span class="string">"l"</span>)</span><br><span class="line">cnt = len(string)</span><br><span class="line">charMax = max(<span class="string">"ABDKHFckdhjfh"</span>)</span><br><span class="line">charMin = min(<span class="string">"ABDKHFckdhjfh"</span>)</span><br><span class="line"></span><br><span class="line">print(num,cnt,charMax,charMin,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">67</span></span><br><span class="line">k</span><br><span class="line">A</span><br></pre></td></tr></table></figure><h4 id="14-编码、解码"><a href="#14-编码、解码" class="headerlink" title="14.编码、解码"></a>14.编码、解码</h4><p><code>encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)</code>: 以 encoding 指定的编码格式编码字符串。</p><p><code>bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code>: Python3 中没有 decode 方法，但可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"我认识你。"</span></span><br><span class="line"></span><br><span class="line">b_string1 = string.encode()</span><br><span class="line">b_string2 = string.encode(<span class="string">"GBK"</span>)</span><br><span class="line">string1 = b_string1.decode()</span><br><span class="line">string2 = b_string2.decode(<span class="string">"GBK"</span>)</span><br><span class="line"></span><br><span class="line">print(b_string1,b_string2,string1,string2,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'\xe6\x88\x91\xe8\xae\xa4\xe8\xaf\x86\xe4\xbd\xa0\xe3\x80\x82'</span></span><br><span class="line"><span class="string">b'\xce\xd2\xc8\xcf\xca\xb6\xc4\xe3\xa1\xa3'</span></span><br><span class="line">我认识你。</span><br><span class="line">我认识你。</span><br></pre></td></tr></table></figure><h4 id="15-序列转字符串"><a href="#15-序列转字符串" class="headerlink" title="15.序列转字符串"></a>15.序列转字符串</h4><p><code>join(seq)</code>函数：以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="string">"I"</span>,<span class="string">"like"</span>,<span class="string">"you"</span>]</span><br><span class="line">string1 = <span class="string">","</span>.join(seq)</span><br><span class="line">string2 = <span class="string">"|"</span>.join(seq)</span><br><span class="line"></span><br><span class="line">print(string1,string2,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I,like,you</span><br><span class="line">I|like|you</span><br></pre></td></tr></table></figure><h4 id="16-子串替换"><a href="#16-子串替换" class="headerlink" title="16.子串替换"></a>16.子串替换</h4><p><code>replace(old, new [, max\])</code>函数：把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"she is right, you are not right."</span></span><br><span class="line">string1 = string.replace(<span class="string">"right"</span>,<span class="string">"bad"</span>)</span><br><span class="line">print(string1)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">she <span class="keyword">is</span> bad, you are <span class="keyword">not</span> bad.</span><br></pre></td></tr></table></figure><h4 id="17-字符串分割"><a href="#17-字符串分割" class="headerlink" title="17.字符串分割"></a>17.字符串分割</h4><p><code>split(str=&quot;&quot;, num=string.count(str))</code>函数：num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串。</p><p><code>splitlines([keepends\])</code>函数： 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"I Love you so mush"</span></span><br><span class="line">seq1 = string.split(<span class="string">" "</span>)</span><br><span class="line">string = <span class="string">"I Love you so mush\n\rYes me to!\nHahah"</span></span><br><span class="line">seq2 = string.splitlines()</span><br><span class="line">seq3 = string.splitlines(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(seq1,seq2,seq3,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'I'</span>, <span class="string">'Love'</span>, <span class="string">'you'</span>, <span class="string">'so'</span>, <span class="string">'mush'</span>]</span><br><span class="line">[<span class="string">'I Love you so mush'</span>, <span class="string">''</span>, <span class="string">'Yes me to!'</span>, <span class="string">'Hahah'</span>]</span><br><span class="line">[<span class="string">'I Love you so mush\n'</span>, <span class="string">'\r'</span>, <span class="string">'Yes me to!\n'</span>, <span class="string">'Hahah'</span>]</span><br></pre></td></tr></table></figure><p>参考链接： <a href="https://www.runoob.com/python3/python3-string.html" target="_blank" rel="noopener">https://www.runoob.com/python3/python3-string.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Python-字符串-string&quot;&gt;&lt;a href=&quot;#Python-字符串-string&quot; class=&quot;headerlink&quot; title=&quot;Python-字符串(string)&quot;&gt;&lt;/a&gt;Python-字符串(string)&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python-字符串(String)格式化</title>
    <link href="https://abin0214.github.io/2020/07/18/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2(string)%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>https://abin0214.github.io/2020/07/18/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2(string)%E6%A0%BC%E5%BC%8F%E5%8C%96/</id>
    <published>2020-07-18T12:55:18.286Z</published>
    <updated>2020-05-21T11:38:11.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-字符串-string-格式化"><a href="#Python-字符串-string-格式化" class="headerlink" title="Python-字符串(string)格式化"></a>Python-字符串(string)格式化</h2><p>使用<code>%</code>或是<code>f-string</code>或是<code>format()</code>函数对字符串进行格式化。</p><h4 id="1-字符串格式化"><a href="#1-字符串格式化" class="headerlink" title="1.字符串格式化"></a>1.字符串格式化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="2-f-string"><a href="#2-f-string" class="headerlink" title="2.f-string"></a>2.f-string</h4><p> f-string 是 python3.6 之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法。 </p><p> f-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去 。</p><h5 id="1）简单使用"><a href="#1）简单使用" class="headerlink" title="1）简单使用"></a>1）简单使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"world"</span></span><br><span class="line">say = <span class="string">f"hello <span class="subst">&#123;name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">print(say)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><h5 id="2）表达式求值与函数调用"><a href="#2）表达式求值与函数调用" class="headerlink" title="2）表达式求值与函数调用"></a>2）表达式求值与函数调用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numCal = <span class="string">f"num calculate result is <span class="subst">&#123;<span class="number">214</span>*<span class="number">22</span>&#125;</span>."</span></span><br><span class="line">funCall = <span class="string">f"A is <span class="subst">&#123;ord(<span class="string">'A'</span>)&#125;</span>."</span></span><br><span class="line">print(numcal,funCall,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num calculate result <span class="keyword">is</span> <span class="number">4708.</span></span><br><span class="line">A <span class="keyword">is</span> <span class="number">65.</span></span><br></pre></td></tr></table></figure><h5 id="3）lambda表达式"><a href="#3）lambda表达式" class="headerlink" title="3）lambda表达式"></a>3）lambda表达式</h5><p>lambda表达式的 <code>:</code> 会被f-string误认为是表达式与格式描述符之间的分隔符，为避免歧义，需要将lambda表达式置于括号 <code>()</code> 内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">twoSquare = <span class="string">f"two's square is <span class="subst">&#123;(<span class="keyword">lambda</span> x:x*x)(<span class="number">2</span>)&#125;</span>."</span></span><br><span class="line">print(twoSquare)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">two<span class="string">'s square is 4.</span></span><br></pre></td></tr></table></figure><p>参考链接： </p><p><a href="https://blog.csdn.net/sunxb10/article/details/81036693" target="_blank" rel="noopener">https://blog.csdn.net/sunxb10/article/details/81036693</a> </p><p><a href="https://www.runoob.com/python3/python3-string.html" target="_blank" rel="noopener">https://www.runoob.com/python3/python3-string.html</a></p><h4 id="3-format-函数"><a href="#3-format-函数" class="headerlink" title="3.format()函数"></a>3.format()函数</h4><h5 id="1）使用位置参数"><a href="#1）使用位置参数" class="headerlink" title="1）使用位置参数"></a>1）使用位置参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">"&#123;&#125; am &#123;&#125;"</span>.format(<span class="string">"I"</span>,<span class="string">"the best"</span>)<span class="comment">#按照默认顺序，不指定位置</span></span><br><span class="line">string2 = <span class="string">"&#123;0&#125; am &#123;1&#125;.&#123;0&#125; am proud."</span>.format(<span class="string">"I"</span>,<span class="string">"the best"</span>)<span class="comment">#设置指定位置，可以多次使用</span></span><br><span class="line"></span><br><span class="line">print(string1,string2,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I am the best</span><br><span class="line">I am the best.I am proud.</span><br></pre></td></tr></table></figure><h5 id="2）使用关键字参数"><a href="#2）使用关键字参数" class="headerlink" title="2）使用关键字参数"></a>2）使用关键字参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"I like &#123;country&#125;."</span>.format(country = <span class="string">"China"</span>)</span><br><span class="line">print(string)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I like China.</span><br></pre></td></tr></table></figure><h5 id="3）-填充与格式化"><a href="#3）-填充与格式化" class="headerlink" title="3） 填充与格式化"></a>3） 填充与格式化</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">"&#123;log:*&gt;20&#125;"</span>.format(log=<span class="string">"error"</span>)<span class="comment">#右对齐</span></span><br><span class="line">string2 = <span class="string">"&#123;log:*&lt;20&#125;"</span>.format(log=<span class="string">"info"</span>)<span class="comment">#左对齐</span></span><br><span class="line">string3 = <span class="string">"&#123;0:*^20&#125;"</span>.format(<span class="string">"logging"</span>)<span class="comment">#居中对齐</span></span><br><span class="line"></span><br><span class="line">print(string1,string2,string3,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***************error</span><br><span class="line">info****************</span><br><span class="line">******logging*******</span><br></pre></td></tr></table></figure><h5 id="4）-精度"><a href="#4）-精度" class="headerlink" title="4） 精度"></a>4） 精度</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">"&#123;num:.2f&#125;"</span>.format(num=<span class="number">4</span>/<span class="number">3</span>)<span class="comment">#保留小数点后两位</span></span><br><span class="line">string2 = <span class="string">"&#123;0:+.2f&#125;"</span>.format(<span class="number">4</span>/<span class="number">3</span>)<span class="comment">#带符号保留小数点后两位</span></span><br><span class="line">string3 = <span class="string">"&#123;0:.0f&#125;"</span>.format(<span class="number">4</span>/<span class="number">3</span>)<span class="comment">#不带小数</span></span><br><span class="line">string4 = <span class="string">"&#123;0:.2%&#125;"</span>.format(<span class="number">4</span>/<span class="number">3</span>)<span class="comment">#百分比格式</span></span><br><span class="line">string5 = <span class="string">"&#123;0:.3e&#125;"</span>.format(<span class="number">100000000</span>)<span class="comment">#科学计数法格式</span></span><br><span class="line">string6 = <span class="string">"&#123;0:,&#125;"</span>.format(<span class="number">1622110141</span>)<span class="comment">#千分位格式化</span></span><br><span class="line"></span><br><span class="line">print(string1,string2,string3,string4,string5,string6,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.33</span></span><br><span class="line">+<span class="number">1.33</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">133.33</span>%</span><br><span class="line"><span class="number">1.000e+08</span></span><br><span class="line"><span class="number">1</span>,<span class="number">622</span>,<span class="number">110</span>,<span class="number">141</span></span><br></pre></td></tr></table></figure><h5 id="5）进制"><a href="#5）进制" class="headerlink" title="5）进制"></a>5）进制</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string1 = <span class="string">"&#123;0:b&#125;"</span>.format(<span class="number">10</span>)<span class="comment">#二进制</span></span><br><span class="line">string2 = <span class="string">"&#123;0:d&#125;"</span>.format(<span class="number">10</span>)<span class="comment">#十进制</span></span><br><span class="line">string3 = <span class="string">"&#123;0:o&#125;"</span>.format(<span class="number">10</span>)<span class="comment">#八进制</span></span><br><span class="line">string4 = <span class="string">"&#123;0:x&#125;"</span>.format(<span class="number">10</span>)<span class="comment">#16进制</span></span><br><span class="line">string5 = <span class="string">"&#123;0:#x&#125;"</span>.format(<span class="number">10</span>)<span class="comment">#16进制，前置0</span></span><br><span class="line">string6 = <span class="string">"&#123;0:#X&#125;"</span>.format(<span class="number">10</span>)<span class="comment">#16进制，前置0，字母大写</span></span><br><span class="line"></span><br><span class="line">print(string1,string2,string3,string4,string5,string6,sep=<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1010</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">a</span><br><span class="line"><span class="number">0xa</span></span><br><span class="line"><span class="number">0XA</span></span><br></pre></td></tr></table></figure><h5 id="6）使用索引"><a href="#6）使用索引" class="headerlink" title="6）使用索引"></a>6）使用索引</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listTemp = [<span class="string">"CPlusPlus"</span>,<span class="string">"Java"</span>,<span class="string">"MySQL"</span>,<span class="string">"Python"</span>]</span><br><span class="line">print(<span class="string">"I like &#123;0[0]&#125; , I also love &#123;0[1]&#125; !"</span>.format(listTemp))</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I like CPlusPlus , I also love Java !</span><br></pre></td></tr></table></figure><h5 id="7）通过字典格式化"><a href="#7）通过字典格式化" class="headerlink" title="7）通过字典格式化"></a>7）通过字典格式化</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map = &#123;<span class="string">"name"</span>:<span class="string">"Yebin"</span>,<span class="string">"language"</span>:<span class="string">"Python"</span>&#125;</span><br><span class="line">print(<span class="string">"My name is &#123;name&#125;,I love &#123;language&#125;."</span>.format(**map))</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My name <span class="keyword">is</span> Yebin,I love Python.</span><br></pre></td></tr></table></figure><h5 id="8）通过元组格式化"><a href="#8）通过元组格式化" class="headerlink" title="8）通过元组格式化"></a>8）通过元组格式化</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tupleTemp = (<span class="string">"Yes"</span>,<span class="string">"No"</span>)</span><br><span class="line">print(<span class="string">"&#123;&#125;,I Love you.&#123;&#125;,I hate you."</span>.format(*tupleTemp))</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes,I Love you.No,I hate you.</span><br></pre></td></tr></table></figure><p>参考链接： </p><p><a href="https://www.runoob.com/python3/python3-string.html" target="_blank" rel="noopener">https://www.runoob.com/python3/python3-string.html</a></p><p><a href="https://www.cnblogs.com/jonm/p/8280968.html" target="_blank" rel="noopener">https://www.cnblogs.com/jonm/p/8280968.html</a></p><p><a href="https://baijiahao.baidu.com/s?id=1618722730278133164&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1618722730278133164&amp;wfr=spider&amp;for=pc</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python-字符串-string-格式化&quot;&gt;&lt;a href=&quot;#Python-字符串-string-格式化&quot; class=&quot;headerlink&quot; title=&quot;Python-字符串(string)格式化&quot;&gt;&lt;/a&gt;Python-字符串(string)格式化&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
